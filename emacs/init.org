#+TITLE Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

*Use M-x org-babel-tangle or use the binding C-c C-v t*

* Environment Initialization

** Structure Templates

#+BEGIN_SRC emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+END_SRC

#+RESULTS:
: ((py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Allow evaluation of Languages
#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp .t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)

#+end_src



** Set Encoding to utf-8
#+begin_src emacs-lisp

  (prefer-coding-system 'utf-8-unix)
  (set-locale-environment "en_PH.UTF-8")
  (set-default-coding-systems 'utf-8-unix)
  (set-selection-coding-system 'utf-8-unix)
  (set-clipboard-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (setq buffer-file-coding-system 'utf-8)
  (setq save-buffer-coding-system 'utf-8-unix)
  (setq process-coding-system-alist
        (cons '("grep" utf-8 . utf-8) process-coding-system-alist))

#+end_src

** Initialize Package Sources
#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives
               '(("melpa" . "https://melpa.org/packages/")
                 ("org" . "https://orgmode.org/elpa/")
                 ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)

#+end_src

* GUI Settings

** Hide emacs splash screen
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

#+end_src

** Disable visible scrollbar, toolbar, tooltip and menu bar
#+begin_src emacs-lisp

  (scroll-bar-mode -1)
  (tool-bar-mode -1)  
  (tooltip-mode -1)   

  (menu-bar-mode -1)  

#+end_src

** Set up Visual Bell
#+begin_src emacs-lisp

  (setq visible-bell t)

#+end_src

** Set Fringes
#+begin_src emacs-lisp

  (set-fringe-mode 10)

#+end_src

** Set Font
#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Fira Code")

#+end_src

** Set Theme
#+begin_src emacs-lisp

  (load-theme 'wombat t)

#+end_src

** Doom Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1))

#+end_src

** Enable line numbers
#+begin_src emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode t)
  ;; disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  treemacs-mode-hook))
    (add-hook mode(lambda () (display-line-numbers-mode 0))))

#+end_src

** All the icons
#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

** Git Gutter
#+begin_src emacs-lisp

  (use-package git-gutter
    :ensure t
    :init (global-git-gutter-mode +1))

#+end_src

* Features

** Enable Sub Word Navigation
#+begin_src emacs-lisp

  (global-subword-mode 1)

#+end_src

** Hungry Delete
Causes deletion to delete all whitespace in the direction that is being deleted

#+begin_src emacs-lisp

  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))

#+end_src

** Simple Clip
Simplified access to the system clipboard

*KeyBindings*
| Key Stroke | Command          |
| Super - c  | simpleclip-copy  |
| Super - x  | simpleclip-cut   |
| Super - v  | simpleclip-paste |


#+begin_src emacs-lisp

  (use-package simpleclip
    :ensure t
    :init
    (simpleclip-mode 1))

#+end_src

** Which Key
#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.9))

#+end_src

** Ivy
Generic Completion Mechanism

#+begin_src emacs-lisp

  (use-package ivy
    :diminish (ivy)
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

#+end_src

** Ivy Rich
More friendly interface for Ivy

#+begin_src emacs-lisp

  (use-package ivy-rich
    :after counsel
    :init
    (ivy-rich-mode 1))

#+end_src

** Counsel
#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;; don't start start searches with ^

#+end_src

** Rainbow Delimiter
Highlight delimiters such as parenthesis, brackets or braces according to their depth
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Projectile
Project interaction library

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-C p" . projectile-command-map)
    :custom ((projectile-completion-system 'ivy));; use ivy with projectile
    :init
    (when (file-directory-p "~/workspace")
      (setq projectile-project-search-path '("~/workspace")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Projectile integration with Counsel
#+begin_src emacs-lisp

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit
A text-based user interface to Git

#+begin_src emacs-lisp

  (use-package magit)

#+end_src

** Smartparens
Deals with parens pairs and tries to be smart about it

#+begin_src emacs-lisp

  (use-package smartparens
    :config
    (setq sp-show-pair-from-inside nil)
    (require 'smartparens-config)
    (add-hook 'prog-mode-hook #'smartparens-mode)
    :diminish smartparens-mode)

#+end_src

** Language Server Protocol
#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t)
    :hook
    (sh-mode . lsp-deferred)
    (markdown-mode . lsp-deferred)
    (typescript-mode . lsp-deferred)
    (js-mode . lsp-deferred)
    (go-mode . lsp-deferred))

#+end_src

*** LSP UI
UI integrations for Language Server Protocol

#+begin_src emacs-lisp

  (use-package lsp-ui
    :after lsp-mode
    :hook
    (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** Eglot
an emacs LSP client that stays out of your way
 
#+begin_src emacs-lisp

  ;; (use-package eglot
  ;;   :config
  ;;   (add-hook 'typescript-mode-hook 'eglot-ensure)
  ;;   (add-hook 'sh-mode-hook 'eglot-ensure)

  ;;   (setq eglot-stay-out-of '(flymake))
  ;;   (add-hook 'eglot-managed-mode-hook (lambda ()
  ;;                                        (add-hook 'flymake-diagnostic-functions 'eglot-flymake-backend nil t))))
#+end_src

**** Eglot Diagnostics wth Flymake
#+begin_src emacs-lisp

  ;; (use-package flymake)

  ;; (use-package flymake-go
  ;;   :after flymake go-mode)
#+end_src

*** Dap Mode
#+begin_src emacs-lisp

  (use-package dap-mode)
 
#+end_src

** Company
A text based completion framework

#+begin_src emacs-lisp

  (use-package company
    :hook
    (prog-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.1)
    (company-selection-wrap-around t))

#+end_src

** Company Box
A company front-end with icons

#+begin_src emacs-lisp

  (use-package company-box
    :after company
    :hook
    (company-mode . company-box-mode))

#+end_src

** Languages Support

*** Typesript
#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))
    ; add dap-mode support
    ;; (require 'dap-node)
    ;; (dap-node-setup))

#+end_src

*** Golang
#+begin_src emacs-lisp

  (use-package go-mode
    :mode "\\.go\\'"
    :config
    (add-hook 'before-save-hook #'lsp-format-buffer)
    (add-hook 'before-save-hook #'lsp-organize-imports))
  ;;  (require 'dap-go));add dap-mode support

#+end_src

*** Markdown
#+begin_src emacs-lisp

  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "multimarkdown"))

#+end_src

** General
Provides a more convenient method for binding keys

#+begin_src emacs-lisp

  (use-package general)

  (general-define-key
   "<escape>" 'keyboard-escape-quit
   "C-M-b" 'counsel-switch-buffer
   "C-c k b" 'tonyo/kill-all-buffers
   "C-c w l" 'tonyo/copy-whole-line)

#+end_src

** Org Mode

*** Configuring Babel Languages
#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

#+end_src

*** Auto Tangle Configuration files
#+begin_src emacs-lisp

  (defun tonyo/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs/settings.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda ()
                             (add-hook 'after-save-hook #'tonyo/org-babel-tangle-config)))

#+end_src

*** Setup Org Mode
#+begin_src emacs-lisp

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▼"
          org-hide-emphasis-markers t)

    (setq org-agenda-files
          '("~/Documents/Work/Tasks.org")))

#+end_src

*** Org Bullets
#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("⊛" "⊕" "⊗" "⊕" "⊗" "⊕" "⊗")))

#+end_src

*** Replace List Hyphen
#+begin_src emacs-lisp

  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

#+end_src

* Custom Defined Functions

** Kill all buffers
#+begin_src emacs-lisp

  (defun tonyo/kill-all-buffers()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))

#+end_src

** Copy texts in current line
#+begin_src emacs-lisp

  (defun tonyo/copy-whole-line()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))

#+end_src

** Org Mode Hook Settings
#+begin_src emacs-lisp

  (defun tonyo/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

#+end_src

